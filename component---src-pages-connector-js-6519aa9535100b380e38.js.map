{"version":3,"sources":["webpack:///./src/pages/connector.js"],"names":["isNilOrEmpty","str","length","styles","mainPadding","padding","mainSidePadding","mainPdf","display","justifyContent","mainTable","backgroundColor","border","borderRadius","boxShadow","position","backButton","cusor","label","fontWeight","langs","en","heading","apiSection","title","style","description","target","href","succsess","fail","placeholder","show","contactSection","typeSection","deleteDialog","cancel","confirm","header","message","x","tabs","nl","Config","microsoftTeams","initialize","state","apiKey","adminId","admins","admin","contacts","contact","loadingContacts","keys","isNew","isOpen","isContactsOpen","locale","tabType","showApiKeys","loaded","addWebhookToMoneybird","bind","setUpWebhook","deleteKeyFromDb","createKeyEntry","getAdmin","getOptions","getContacts","getAdminAndContacts","updateContact","componentDidMount","a","this","window","getContext","context","tid","fetch","mode","method","res","json","console","log","map","k","content","cursor","class","onClick","setState","deleteKey","key","e","value","v","q","searchQuery","body","JSON","stringify","path","save","webhook","contactId","lang","split","data","url","events","error","id","settings","setValidityState","registerOnSaveHandler","saveEvent","entityId","teamId","channelId","setSettings","contentUrl","configName","getSettings","webhookUrl","exec","encoded","encodeURIComponent","notifySuccess","filter","handleToken","c","company_name","render","theme","themes","teams","gap","vAlign","hAlign","width","background","color","marginTop","marginBottom","items","onOpenChange","name","clearable","fluid","search","open","itemToString","i","onSearchQueryChange","noResultsMessage","m","active","ref","r","drop","loading","loadingMessage","onChange","disabled","cancelButton","onCancel","confirmButton","onConfirm","backdrop","React","Component"],"mappings":"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","file":"component---src-pages-connector-js-6519aa9535100b380e38.js","sourcesContent":["import React from 'react';\nimport { Provider, themes, Flex, FlexItem, Dropdown, RadioGroup, Header, Label, Button, Dialog} from '@fluentui/react-northstar';\nimport { BanIcon, AcceptIcon } from '@fluentui/react-icons-northstar';\n\nconst isNilOrEmpty = str => str==null || str.length == 0\n\nconst styles={\n    mainPadding:{padding:\"0px 2em\"},\n    mainSidePadding:{padding:\"10px 2em\"},\n    mainPdf:{display:\"flex\", justifyContent:\"center\"},\n    mainTable:{\n        backgroundColor: \"#fff\",\n        border: \"1px solid #d8e2f0\",\n        borderRadius: \"4px\",\n        boxShadow: \"0 0 10px 0 rgba(19,29,41,.05)\",\n        position: \"relative\",\n        padding: \"0em 3em 2em\"\n    },\n    backButton:{\n        cusor:\"pointer\"\n    },\n    label:{\n        fontWeight:\"bold\"\n    }\n}\n\nconst langs={\n    en:{\n        heading:\"Moneybird Configuration\",\n        apiSection:{\n            title: <label style={styles.label} >API Token</label>,\n            description:  <span>This is the API Token for you MoneyBird Account. You can generate one <a target=\"_blank\" href=\"https://moneybird.com/user/applications/new\">here</a> for personal use.</span>,\n            succsess: \"API Token is vaild\",\n            fail: \"API Token NOT vaild\",\n            placeholder: 'API Token',\n            show:\"Click to choose another api key\"\n        },\n        contactSection:{\n            title:<label style={styles.label} >Contact</label>,\n            description: <span>The contact whos data will show up on the tab</span>,\n            placeholder: 'Choose a Contact'\n        },\n        typeSection:{\n            title:<label style={styles.label} >Data Type</label>,\n            description: <span>The type of data to show on the tab</span>,\n           \n        },\n        deleteDialog:{\n            cancel: \"Cancel\",\n            confirm: \"Yes\",\n            header:\"Delete API Key\",\n            message: x=>`Are you sure you want to delete ${x}`,\n\n        },\n        tabs:[\"Invoices\", \"Quotes\"]\n    },\n    nl:{\n        heading:\"Moneybird Koppelen\",\n        apiSection:{\n            title:<label style={styles.label} >API token invoeren</label>,\n            description:  <span>Vul hier een API-token in van je Moneybird account. Je kunt <a target=\"_blank\" href=\"https://moneybird.com/user/applications/new\">hier</a> een API-token genereren. Vul een naam in die herkenbaar is voor deze connectie, bijvoorbeeld ‘Microsoft Teams Integratie’. Kies voor ‘API token voor persoonlijk gebruik’ en geef toegang voor alle onderdelen. Vervolgens verschijnt er een API-token in beeld. Vul deze hieronder in.</span>,\n            succsess: \"API-token is geldig\",\n            fail: \"API-token niet geldig\",\n            placeholder: 'API token invoeren',\n            show:\"Klik om een ​​andere API-sleutel te kiezen\"\n        },\n        contactSection:{\n            title:<label style={styles.label} >Contact</label>,\n            description:  <span>Selecteer de Contact waarvan je de gegevens wilt tonen in de Tab.</span>,\n            placeholder:\"Kies een Contact\"\n        },\n        typeSection:{\n            title:<label style={styles.label} >Data Type</label>,\n            description: <span>Het type gegevens dat op het tabblad moet worden weergegeven</span>,\n           \n        },\n        deleteDialog:{\n            cancel: \"Annuleren\",\n            confirm: \"Ja\",\n            header:\"API-sleutel verwijderen\",\n            message: x=>`Weet je zeker dat je wilt verwijderen ${x}`,\n\n        },\n        tabs:[\"Facturen\", \"Offertes\"]\n    }\n}\n\nclass Config extends React.Component{\n    constructor(){\n        super();\n        if(this.microsoftTeams)\n            this.microsoftTeams.initialize();\n        this.state ={\n            apiKey:\"\",\n            adminId:null,\n            admins:null,\n            admin:null,\n            contacts:null,\n            contact:null,\n            loadingContacts:false,\n            keys:[],\n            isNew:false,\n            isOpen: false,\n            isContactsOpen: false,\n            locale:null,\n            tabType:\"invoices\",\n            showApiKeys: false,\n            loaded: false\n        }\n        \n        this.addWebhookToMoneybird = this.addWebhookToMoneybird.bind(this)\n        this.setUpWebhook = this.setUpWebhook.bind(this)\n        this.deleteKeyFromDb=this.deleteKeyFromDb.bind(this)\n        this.createKeyEntry=this.createKeyEntry.bind(this)\n        this.getAdmin =this.getAdmin.bind(this)\n        this.getOptions = this.getOptions.bind(this)\n        this.getContacts = this.getContacts.bind(this)\n        this.getAdminAndContacts = this.getAdminAndContacts.bind(this)\n        this.updateContact = this.updateContact.bind(this)\n    }\n\n    async componentDidMount(){\n      this.microsoftTeams = window? window.microsoftTeams: null;\n        this.microsoftTeams.initialize();\n        this.microsoftTeams.getContext((async context=>{\n            const {tid, locale} = context;\n            \n            try{\n                const res = await fetch(\n                    `https://moneybirdhandlerproxy.azurewebsites.net/api/key/${tid}`,\n                    {\n                        mode:\"cors\",\n                        method:\"GET\"\n                    }\n                )\n                const json = await res.json()\n                console.log({json})\n                const keys = json.map(k=>({\n                    content: <div>\n                        <span \n                            style={{cursor:\"pointer\"}} \n                            class=\"lnr lnr-trash\" \n                            onClick={()=>this.setState({deleteKey:k.key, isOpen:false})}></span> - <span style={{cursor:\"pointer\"}} onClick={async ()=>{await this.getAdminAndContacts(k.key)}}>{k.key}</span>\n                    </div>,\n                    key: k.key\n                }));\n                console.log({keys})\n                this.setState({keys, tid, locale})\n    \n            }\n            catch(e){\n                console.log(\"BOO\")\n                console.log(e)\n            }\n    }).bind(this))\n    }\n\n    async getAdminAndContacts(apiKey){\n        const adminId =  await this.getAdmin(apiKey);\n        await this.getContacts()\n    }\n\n    updateContact(e, {value}){\n        const {apiKey} = this.state;\n        this.setState({contact:value}, this.setUpWebhook(apiKey))\n    }\n\n    async getContacts(v, e){\n        \n        const {apiKey, adminId} = this.state;\n        if(e){\n            const q = e.searchQuery;\n            try{\n                this.setState({loadingContacts:true})\n                const res = await fetch(\n                    `https://moneybirdhandlerproxy.azurewebsites.net/api/MoneyBirdProxy`,\n                    {\n                        mode:\"cors\",\n                        method:\"POST\",\n                        body: JSON.stringify({\n                            method:\"GET\",\n                            path:`${adminId}/contacts.json${isNilOrEmpty(q)?'':\"?query=\"+q}`,\n                            key: apiKey,\n                        })\n                    }\n                )\n                const json = await res.json()\n                console.log({json})\n                this.setState({contacts:json, loadingContacts:false})\n    \n            }\n            catch(e){\n                console.log(\"BOOM!\")\n                console.log(e)\n            }\n        }\n        else if(v){\n            this.setState({ contact: v.value }, this.save)\n        }\n        else{\n            const res = await fetch(\n                `https://moneybirdhandlerproxy.azurewebsites.net/api/MoneyBirdProxy`,\n                {\n                    mode:\"cors\",\n                    method:\"POST\",\n                    body: JSON.stringify({\n                        method:\"GET\",\n                        path:`${adminId}/contacts.json`,\n                        key: apiKey,\n                    })\n                }\n            )\n            const json = await res.json()\n            console.log({json})\n            this.setState({contacts:json,  isOpen:false})\n        }\n       \n    }\n    \n    async addWebhookToMoneybird(apiKey, adminId, webhook){\n        const {locale, contact:{value:contactId}} = this.state\n        console.log(\"AHHHHHHH!!!\")\n        console.log({locale})\n        const lang = locale? locale.split(\"-\")[0]: \"en\"\n        const res = await fetch(\n            `https://moneybirdhandlerproxy.azurewebsites.net/api/MoneyBirdProxy`,\n            {\n                mode:\"cors\",\n                method:\"POST\",\n                body: JSON.stringify({\n                    method:\"POST\",\n                    path:`${adminId}/webhooks.json`,\n                    key: apiKey,\n                    data:{\n                        url:`https://moneybirdhandlerproxy.azurewebsites.net/api/teams/${lang}/${contactId}/${webhook}`,\n                        events:[\"sales_invoice_created\"]\n                    }\n                })\n            }\n        )\n        console.log(\"AHHHHHHH!!!\")\n        return await res.json()\n    }\n\n    async getAdmin(apiKey, isNew=false){\n        \n        try{\n            const res = await fetch(\n                `https://moneybirdhandlerproxy.azurewebsites.net/api/MoneyBirdProxy`,\n                {\n                    mode:\"cors\",\n                    method:\"POST\",\n                    body: JSON.stringify({\n                        method:\"GET\",\n                        path:`administrations.json`,\n                        key: apiKey,\n                    })\n                }\n            )\n            const json = await res.json()\n            \n            if(json.error)\n                this.setState({admins:false,  isOpen:false, contacts:null})\n            else{\n                this.setState({admin:json[0], adminId:json[0].id, admins:true})\n                return json[0].id\n            }\n        }\n        catch(e){\n            console.log(e)\n        }\n    }\n\n    async setUpWebhook(v){\n        this.setState({apiKey:v, isOpen:false})\n        console.log(\"SETUPWEBHOOK\")\n        \n        this.microsoftTeams.settings.setValidityState(true);\n        console.log(\"saved\")\n        this.microsoftTeams.settings.registerOnSaveHandler((saveEvent=>{\n            console.log(\"REGISTERSAVEHANDLER\")\n            this.microsoftTeams.getContext((context=>{\n                console.log(\"GETCONTEXT\")\n                const {teamId, channelId} = context;\n                const contentUrl = `https://jp5525.github.io/teams-demo/connector`;\n                const entityId = `connector-moneybird-${teamId}-${channelId}`;\n\n                this.microsoftTeams.settings.setSettings({\n                    contentUrl,\n                    entityId,\n                    configName:\"MoneyBird Invoices\"\n                });\n\n                this.microsoftTeams.settings.getSettings(async settings=>{\n                    const { webhookUrl } = settings;\n                    const res = /webhook\\/(.*)/.exec(webhookUrl);\n                    const encoded = encodeURIComponent(res[1]);\n                    console.log({webhookUrl});\n\n                    const adminId = await this.getAdmin(v);\n                    //double encode the webhook\n                    const webhook = await this.addWebhookToMoneybird(v, adminId, encodeURIComponent(encoded))\n                    console.log({webhook})\n                        \n                    saveEvent.notifySuccess()\n                })\n\n            }).bind(this))\n        }).bind(this))\n    }\n\n    async deleteKeyFromDb(){\n        const {deleteKey, keys} = this.state;\n        if(!isNilOrEmpty(deleteKey)){\n            await fetch(\n                `https://moneybirdhandlerproxy.azurewebsites.net/api/key/${deleteKey}`,\n                {\n                    mode:\"cors\",\n                    method:\"DELETE\",\n                }\n            );\n            this.setState({deleteKey:null, apiKey:\"\", keys:keys.filter(x=>x.key != deleteKey)})\n        }\n    }\n\n    createKeyEntry(k){\n        return {\n            content:<div>\n                <span style={{cursor:\"pointer\"}} class=\"lnr lnr-trash\" onClick={()=>this.setState({deleteKey:k})}></span> - <span style={{cursor:\"pointer\"}} onClick={()=>this.handleToken(k)}>{k}</span>\n            </div>,\n            key:k\n        }\n    }\n\n    getOptions(){\n        const {contacts} = this.state;\n        return contacts.map(c=>({\n            content:c.company_name, \n            value:c.id,\n        }))\n    }\n\n    render(){\n        const {contacts, contact, admins, admin, apiKey, keys, isOpen, locale, loadingContacts, showApiKeys, deleteKey } = this.state;\n        console.log({locale})\n        const lang = locale? langs[locale.split(\"-\")[0]]: null\n        \n        return (\n            lang?\n                <Provider theme={themes.teams}>\n                    <div style={styles.mainPadding}>\n                        <div style={styles.mainTable}>\n                            <Header content={lang.heading}/>\n                            <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"start\">\n                                <FlexItem justifyContent=\"center\">\n                                    <form  style={{width:\"100%\"}}>\n                                        \n                                        {lang.apiSection.title} <br/>\n                                        {lang.apiSection.description}\n                                        {admins== false? <> <br/><Label content={lang.apiSection.fail} style={{background:\"#cc4a31\", color:\"white\", marginTop: \"10px\", marginBottom:\"10px\"}}/></> : null}\n                                        {admins? <> <br/><Label content={lang.apiSection.succsess} style={{background:\"#7fba00\", color:\"white\", marginTop: \"10px\", marginBottom:\"10px\"}} /></> : null}\n                                        {<Dropdown\n                                            items={keys}\n                                            placeholder={lang.apiSection.placeholder}\n                                            onOpenChange={()=>this.setState({isOpen:!isOpen})}\n                                            name=\"apiKey\"\n                                            id=\"apiKey\"\n                                            clearable={apiKey && apiKey.length>0}\n                                            fluid={true}\n                                            search={true}\n                                            open={isOpen}\n                                            searchQuery={apiKey}\n                                            itemToString={i=> i? i.key : \"\"}\n                                            onSearchQueryChange={(e, v)=>this.setState({apiKey:v.searchQuery})}\n                                            noResultsMessage={{\n                                                content:`Add... ${apiKey}`, \n                                                onClick: m=>{\n                                                    this.setState({isNew:true, keys:[this.createKeyEntry(apiKey), ...keys], isOpen:false})\n                                                    \n                                                }, \n                                                style:{cursor: \"pointer\"},\n                                                active: true\n                                            }}\n                                        />\n                                        }\n\n                                        <br />\n\n                                        {lang.contactSection.title} <br/>\n                                        {lang.contactSection.description}\n                                        <Dropdown\n                                            ref={r=>this.drop=r}\n                                            items={contacts? this.getOptions(): []}\n                                            value={contact? contact.content : null}\n                                            placeholder={lang.contactSection.placeholder}\n                                            search={true}\n                                            loading={loadingContacts}\n                                            loadingMessage=\"Loading...\"\n                                            onSearchQueryChange={this.getContacts}\n                                            onChange={this.updateContact}\n                                            name=\"contact\"\n                                            disabled={contacts? false: true}\n                                            itemToString={i=>i?i.content:''}\n                                            fluid={true}\n                                            />\n\n                                        <br />\n                                        <Dialog\n                                            cancelButton={lang.deleteDialog.cancel}\n                                            onCancel={()=>this.setState({deleteKey:null})}\n                                            confirmButton={lang.deleteDialog.confirm}\n                                            onConfirm={this.deleteKeyFromDb}\n                                            content={lang.deleteDialog.message(deleteKey)}\n                                            header={lang.deleteDialog.header}\n                                            open={!isNilOrEmpty(deleteKey)}\n                                            backdrop={true} \n                                        />\n                                        \n                                      \n                                    </form>\n                                </FlexItem>\n                            </Flex>\n                        </div>\n                    </div>\n                \n                </Provider>:\n                null\n            \n            \n        )\n\n    }\n}\n\nexport default Config;\n"],"sourceRoot":""}