{"version":3,"sources":["webpack:///./src/pages/connector.js"],"names":["isNilOrEmpty","str","length","styles","mainPadding","padding","mainSidePadding","mainPdf","display","justifyContent","mainTable","backgroundColor","border","borderRadius","boxShadow","position","backButton","cusor","label","fontWeight","langs","en","heading","apiSection","title","style","description","target","href","succsess","fail","placeholder","show","contactSection","typeSection","deleteDialog","cancel","confirm","header","message","x","types","nl","Config","microsoftTeams","initialize","state","apiKey","adminId","admins","admin","contacts","contact","loadingContacts","keys","isNew","isOpen","isContactsOpen","locale","tabType","showApiKeys","loaded","forHours","forInvoices","forQuotes","addWebhookToMoneybird","bind","setUpWebhook","deleteKeyFromDb","createKeyEntry","getAdmin","getOptions","getContacts","getAdminAndContacts","updateContact","componentDidMount","a","this","window","getContext","context","tid","fetch","mode","method","res","json","console","log","map","k","content","cursor","class","onClick","setState","deleteKey","key","getForDataTypes","urlParam","events","push","join","e","value","v","q","searchQuery","body","JSON","stringify","path","save","webhook","contactId","lang","split","data","url","error","id","settings","setValidityState","registerOnSaveHandler","saveEvent","teamId","channelId","forTypes","notifyFailure","entityId","setSettings","contentUrl","configName","getSettings","webhookUrl","exec","encoded","encodeURIComponent","notifySuccess","filter","handleToken","c","company_name","render","theme","teamsTheme","gap","vAlign","hAlign","width","background","color","marginTop","marginBottom","items","onOpenChange","name","clearable","fluid","search","open","itemToString","i","onSearchQueryChange","noResultsMessage","m","active","ref","r","drop","loading","loadingMessage","onChange","disabled","checked","cancelButton","onCancel","confirmButton","onConfirm","backdrop","React","Component"],"mappings":"2TAIMA,EAAe,SAAAC,GAAG,OAAS,MAALA,GAA2B,GAAdA,EAAIC,QAEvCC,EAAO,CACTC,YAAY,CAACC,QAAQ,WACrBC,gBAAgB,CAACD,QAAQ,YACzBE,QAAQ,CAACC,QAAQ,OAAQC,eAAe,UACxCC,UAAU,CACNC,gBAAiB,OACjBC,OAAQ,oBACRC,aAAc,MACdC,UAAW,gCACXC,SAAU,WACVV,QAAS,eAEbW,WAAW,CACPC,MAAM,WAEVC,MAAM,CACFC,WAAW,SAIbC,EAAM,CACRC,GAAG,CACCC,QAAQ,0BACRC,WAAW,CACPC,MAAO,2BAAOC,MAAOtB,EAAOe,OAArB,aACPQ,YAAc,uGAA4E,uBAAGC,OAAO,SAASC,KAAK,+CAAxB,QAA5E,sBACdC,SAAU,qBACVC,KAAM,sBACNC,YAAa,YACbC,KAAK,mCAETC,eAAe,CACXT,MAAM,2BAAOC,MAAOtB,EAAOe,OAArB,WACNQ,YAAa,+EACbK,YAAa,oBAEjBG,YAAY,CACRV,MAAM,2BAAOC,MAAOtB,EAAOe,OAArB,aACNQ,YAAa,6EAGjBS,aAAa,CACTC,OAAQ,SACRC,QAAS,MACTC,OAAO,iBACPC,QAAS,SAAAC,GAAC,yCAAqCA,IAGnDC,MAAM,CAAC,WAAY,SAAU,UAEjCC,GAAG,CACCpB,QAAQ,qBACRC,WAAW,CACPC,MAAM,2BAAOC,MAAOtB,EAAOe,OAArB,sBACNQ,YAAc,6FAAkE,uBAAGC,OAAO,SAASC,KAAK,+CAAxB,QAAlE,4RACdC,SAAU,sBACVC,KAAM,wBACNC,YAAa,qBACbC,KAAK,8CAETC,eAAe,CACXT,MAAM,2BAAOC,MAAOtB,EAAOe,OAArB,WACNQ,YAAc,mGACdK,YAAY,oBAEhBG,YAAY,CACRV,MAAM,2BAAOC,MAAOtB,EAAOe,OAArB,aACNQ,YAAa,+FAGjBS,aAAa,CACTC,OAAQ,YACRC,QAAS,KACTC,OAAO,0BACPC,QAAS,SAAAC,GAAC,+CAA2CA,IAGzDC,MAAM,CAAC,WAAY,WAAY,UAIjCE,E,YACF,aAAc,IAAD,SACT,sBACQC,gBACJ,EAAKA,eAAeC,aACxB,EAAKC,MAAO,CACRC,OAAO,GACPC,QAAQ,KACRC,OAAO,KACPC,MAAM,KACNC,SAAS,KACTC,QAAQ,KACRC,iBAAgB,EAChBC,KAAK,GACLC,OAAM,EACNC,QAAQ,EACRC,gBAAgB,EAChBC,OAAO,KACPC,QAAQ,WACRC,aAAa,EACbC,QAAQ,EAERC,UAAS,EACTC,aAAY,EACZC,WAAU,GAGd,EAAKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,gBAAgB,EAAKA,gBAAgBF,KAArB,gBACrB,EAAKG,eAAe,EAAKA,eAAeH,KAApB,gBACpB,EAAKI,SAAU,EAAKA,SAASJ,KAAd,gBACf,EAAKK,WAAa,EAAKA,WAAWL,KAAhB,gBAClB,EAAKM,YAAc,EAAKA,YAAYN,KAAjB,gBACnB,EAAKO,oBAAsB,EAAKA,oBAAoBP,KAAzB,gBAC3B,EAAKQ,cAAgB,EAAKA,cAAcR,KAAnB,gBAlCZ,E,4CAqCPS,kB,uCAAN,iCAAAC,EAAA,sDA+BEC,KAAKjC,eAAiBkC,OAAQA,OAAOlC,eAAgB,KACnDiC,KAAKjC,eAAeC,aACpBgC,KAAKjC,eAAemC,WAAW,uCAAC,WAAMC,GAAN,uBAAAJ,EAAA,6DACrBK,EAAeD,EAAfC,IAAKvB,EAAUsB,EAAVtB,OADgB,kBAINwB,MAAM,4DACwCD,EAC5D,CACIE,KAAK,OACLC,OAAO,QARS,cAIlBC,EAJkB,gBAWLA,EAAIC,OAXC,OAWlBA,EAXkB,OAYxBC,QAAQC,IAAI,CAACF,SACPhC,EAAOgC,EAAKG,KAAI,SAAAC,GAAC,MAAG,CACtBC,QAAS,6BACL,0BACIlE,MAAO,CAACmE,OAAO,WACfC,MAAM,gBACNC,QAAS,kBAAI,EAAKC,SAAS,CAACC,UAAUN,EAAEO,IAAKzC,QAAO,OAJnD,MAIsE,0BAAM/B,MAAO,CAACmE,OAAO,WAAYE,QAAO,sBAAE,sBAAAlB,EAAA,sEAAiB,EAAKH,oBAAoBiB,EAAEO,KAA5C,4CAAoDP,EAAEO,MAE/KA,IAAKP,EAAEO,QAEXV,QAAQC,IAAI,CAAClC,SACb,EAAKyC,SAAS,CAACzC,OAAM2B,MAAKvB,WAvBF,kDA2BxB6B,QAAQC,IAAI,OACZD,QAAQC,IAAR,MA5BwB,0DAAD,sDA8BhCtB,KAAKW,OA/DR,gD,uDAkEAqB,gBAAA,WAAkB,IAAD,EAC8BrB,KAAK/B,MAAzCiB,EADM,EACNA,YAAaC,EADP,EACOA,UAAWF,EADlB,EACkBA,SAC3BqC,EAAW,GACXC,EAAS,GAgBb,OAdGrC,IACCoC,EAASE,KAAK,KACdD,EAAOC,KAAK,0BAEbrC,IACCmC,EAASE,KAAK,KACdD,EAAOC,KAAK,qBAEbvC,IACCqC,EAASE,KAAK,KACdD,EAAOC,KAAK,sBACZD,EAAOC,KAAK,uBAGV,CACFF,SAAUA,EAASG,KAAK,KACxBF,W,EAIF3B,oB,uCAAN,WAA0B1B,GAA1B,SAAA6B,EAAA,sEAC2BC,KAAKP,SAASvB,GADzC,8BAEU8B,KAAKL,cAFf,gD,wDAKAE,cAAA,SAAc6B,EAAd,GAA0B,IAAD,OAAPC,EAAO,EAAPA,MACPzD,EAAU8B,KAAK/B,MAAfC,OACP8B,KAAKkB,SAAS,CAAC3C,QAAQoD,IAAQ,kBAAI,EAAKrC,aAAapB,O,EAGnDyB,Y,uCAAN,WAAkBiC,EAAGF,GAArB,6BAAA3B,EAAA,2DAE8BC,KAAK/B,MAAxBC,EAFX,EAEWA,OAAQC,EAFnB,EAEmBA,SACZuD,EAHP,wBAIcG,EAAIH,EAAEI,YAJpB,SAMY9B,KAAKkB,SAAS,CAAC1C,iBAAgB,IAN3C,SAO8B6B,MAAM,sEAEpB,CACIC,KAAK,OACLC,OAAO,OACPwB,KAAMC,KAAKC,UAAU,CACjB1B,OAAO,MACP2B,KAAQ/D,EAAJ,kBAA4BhD,EAAa0G,GAAG,GAAG,UAAUA,GAC7DT,IAAKlD,MAf7B,cAOkBsC,EAPlB,iBAmB+BA,EAAIC,OAnBnC,QAmBkBA,EAnBlB,OAoBYC,QAAQC,IAAI,CAACF,SACbT,KAAKkB,SAAS,CAAC5C,SAASmC,EAAMjC,iBAAgB,IArB1D,kDAyBYkC,QAAQC,IAAI,SACZD,QAAQC,IAAR,MA1BZ,oCA6BYiB,EA7BZ,iBA8BQ5B,KAAKkB,SAAS,CAAE3C,QAASqD,EAAED,OAAS3B,KAAKmC,MA9BjD,yCAiC0B9B,MAAM,sEAEpB,CACIC,KAAK,OACLC,OAAO,OACPwB,KAAMC,KAAKC,UAAU,CACjB1B,OAAO,MACP2B,KAAQ/D,EAAJ,iBACJiD,IAAKlD,MAzCzB,eAiCcsC,EAjCd,iBA6C2BA,EAAIC,OA7C/B,QA6CcA,EA7Cd,OA8CQC,QAAQC,IAAI,CAACF,SACbT,KAAKkB,SAAS,CAAC5C,SAASmC,EAAO9B,QAAO,IA/C9C,0D,0DAoDMS,sB,uCAAN,WAA4BlB,EAAQC,EAASiE,EAASb,GAAtD,yBAAAxB,EAAA,+DAC8BC,KAAK/B,MAAxBY,EADX,EACWA,OAAQN,EADnB,EACmBA,QACT8D,EAAY9D,EAAQoD,MAC1BjB,QAAQC,IAAI,eACZD,QAAQC,IAAI,CAACY,WACbb,QAAQC,IAAI,CAAC9B,WACb6B,QAAQC,IAAI,CAAC0B,cACb3B,QAAQC,IAAR,8DAA0E2B,EAA1E,IAAkFf,EAAOD,SAAzF,IAAqGe,EAArG,IAAkHD,GAC5GE,EAAOzD,EAAQA,EAAO0D,MAAM,KAAK,GAAI,KAR/C,UASsBlC,MAAM,sEAEpB,CACIC,KAAK,OACLC,OAAO,OACPwB,KAAMC,KAAKC,UAAU,CACjB1B,OAAO,OACP2B,KAAQ/D,EAAJ,iBACJiD,IAAKlD,EACLsE,KAAK,CACDC,IAAI,8DAA8DH,EAA/D,IAAuEf,EAAOD,SAA9E,IAA0Fe,EAA1F,IAAuGD,EAC1Gb,OAAQA,EAAOA,YApBnC,eASUf,EATV,OAyBIE,QAAQC,IAAI,eAzBhB,UA0BiBH,EAAIC,OA1BrB,0F,8DA6BMhB,S,uCAAN,WAAevB,EAAQQ,GAAvB,iBAAAqB,EAAA,sEAAuBrB,OAAM,GAA7B,kBAG0B2B,MAAM,sEAEpB,CACIC,KAAK,OACLC,OAAO,OACPwB,KAAMC,KAAKC,UAAU,CACjB1B,OAAO,MACP2B,KAAK,uBACLd,IAAKlD,MAXzB,cAGcsC,EAHd,gBAe2BA,EAAIC,OAf/B,YAecA,EAfd,QAiBgBiC,MAjBhB,iBAkBY1C,KAAKkB,SAAS,CAAC9C,QAAO,EAAQO,QAAO,EAAOL,SAAS,OAlBjE,+BAoBY0B,KAAKkB,SAAS,CAAC7C,MAAMoC,EAAK,GAAItC,QAAQsC,EAAK,GAAGkC,GAAIvE,QAAO,IApBrE,kBAqBmBqC,EAAK,GAAGkC,IArB3B,0DAyBQjC,QAAQC,IAAR,MAzBR,0D,0DA6BMrB,a,uCAAN,WAAmBsC,GAAnB,oBAAA7B,EAAA,sDACIC,KAAKkB,SAAS,CAAChD,OAAO0D,EAAGjD,QAAO,IAChC+B,QAAQC,IAAI,gBAEZX,KAAKjC,eAAe6E,SAASC,kBAAiB,GAC9CnC,QAAQC,IAAI,SACZX,KAAKjC,eAAe6E,SAASE,sBAAuB,SAAAC,GAChDrC,QAAQC,IAAI,uBACZ,EAAK5C,eAAemC,WAAY,SAAAC,GAC5BO,QAAQC,IAAI,cADyB,IAE9BqC,EAAqB7C,EAArB6C,OAAQC,EAAa9C,EAAb8C,UACTC,EAAW,EAAK7B,kBACtB,GAAGlG,EAAa+H,EAAS5B,UACrByB,EAAUI,cAAc,uDAD5B,CAIA,IACMC,EAAQ,uBAA0BJ,EAA1B,IAAoCC,EAElD,EAAKlF,eAAe6E,SAASS,YAAY,CACrCC,WAJY,gDAKZF,WACAG,WAAW,cAGf,EAAKxF,eAAe6E,SAASY,YAA7B,uCAAyC,WAAMZ,GAAN,uBAAA7C,EAAA,6DAC7B0D,EAAeb,EAAfa,WACFjD,EAAM,gBAAgBkD,KAAKD,GAC3BE,EAAUC,mBAAmBpD,EAAI,IACvCE,QAAQC,IAAI,CAAC8C,eAJwB,SAMf,EAAKhE,SAASmC,GANC,cAM/BzD,EAN+B,gBAQf,EAAKiB,sBAAsBwC,EAAGzD,EAASyF,mBAAmBD,GAAUT,GARrD,OAQ/Bd,EAR+B,OASrC1B,QAAQC,IAAI,CAACyB,YAEbW,EAAUc,gBAX2B,4CAAzC,kCAAA7D,KAAA,kBAcDX,KAAK,KACTA,KAAKW,OAxCZ,gD,wDA2CMT,gB,uCAAN,gCAAAQ,EAAA,2DAC8BC,KAAK/B,MAAxBkD,EADX,EACWA,UAAW1C,EADtB,EACsBA,KACdtD,EAAagG,GAFrB,gCAGcd,MAAM,4DACoDc,EAC5D,CACIb,KAAK,OACLC,OAAO,WAPvB,OAUQP,KAAKkB,SAAS,CAACC,UAAU,KAAMjD,OAAO,GAAIO,KAAKA,EAAKqF,QAAO,SAAAnG,GAAC,OAAEA,EAAEyD,KAAOD,OAV/E,gD,uDAcA3B,eAAA,SAAeqB,GAAG,IAAD,OACb,MAAO,CACHC,QAAQ,6BACJ,0BAAMlE,MAAO,CAACmE,OAAO,WAAYC,MAAM,gBAAgBC,QAAS,kBAAI,EAAKC,SAAS,CAACC,UAAUN,OADzF,MACwG,0BAAMjE,MAAO,CAACmE,OAAO,WAAYE,QAAS,kBAAI,EAAK8C,YAAYlD,KAAKA,IAEpLO,IAAIP,I,EAIZnB,WAAA,WAEI,OADmBM,KAAK/B,MAAjBK,SACSsC,KAAI,SAAAoD,GAAC,MAAG,CACpBlD,QAAQkD,EAAEC,aACVtC,MAAMqC,EAAErB,Q,EAIhBuB,OAAA,WAAS,IAAD,SACiJlE,KAAK/B,MAAnJK,EADH,EACGA,SAAUC,EADb,EACaA,QAASH,EADtB,EACsBA,OAAeF,GADrC,EAC8BG,MAD9B,EACqCH,QAAQO,EAD7C,EAC6CA,KAAME,EADnD,EACmDA,OAAQE,EAD3D,EAC2DA,OAAQL,EADnE,EACmEA,gBAA8B2C,GADjG,EACoFpC,YADpF,EACiGoC,WAAWlC,EAD5G,EAC4GA,SAAUC,EADtH,EACsHA,YAAaC,EADnI,EACmIA,UACvIuB,QAAQC,IAAI,CAAC9B,WACb,IAAMyD,EAAOzD,EAAQtC,EAAMsC,EAAO0D,MAAM,KAAK,IAAK,KAElD,OACID,EACI,kBAAC,IAAD,CAAU6B,MAAOC,KACb,yBAAKxH,MAAOtB,EAAOC,aACf,yBAAKqB,MAAOtB,EAAOO,WACf,kBAAC,IAAD,CAAQiF,QAASwB,EAAK7F,UACtB,kBAAC,IAAD,CAAM4H,IAAI,YAAYC,OAAO,SAASC,OAAO,SACzC,kBAAC,IAAD,CAAU3I,eAAe,UACrB,0BAAOgB,MAAO,CAAC4H,MAAM,SAEhBlC,EAAK5F,WAAWC,MAFrB,IAE4B,6BACvB2F,EAAK5F,WAAWG,YACP,GAATuB,EAAgB,wCAAG,6BAAK,kBAAC,IAAD,CAAO0C,QAASwB,EAAK5F,WAAWO,KAAML,MAAO,CAAC6H,WAAW,UAAWC,MAAM,QAASC,UAAW,OAAQC,aAAa,WAAgB,KAC3JxG,EAAQ,wCAAG,6BAAK,kBAAC,IAAD,CAAO0C,QAASwB,EAAK5F,WAAWM,SAAUJ,MAAO,CAAC6H,WAAW,UAAWC,MAAM,QAASC,UAAW,OAAQC,aAAa,WAAiB,KACxJ,kBAAC,IAAD,CACGC,MAAOpG,EACPvB,YAAaoF,EAAK5F,WAAWQ,YAC7B4H,aAAc,kBAAI,EAAK5D,SAAS,CAACvC,QAAQA,KACzCoG,KAAK,SACLpC,GAAG,SACHqC,UAAW9G,GAAUA,EAAO7C,OAAO,EACnC4J,OAAO,EACPC,QAAQ,EACRC,KAAMxG,EACNmD,YAAa5D,EACbkH,aAAc,SAAAC,GAAC,OAAGA,EAAGA,EAAEjE,IAAM,IAC7BkE,oBAAqB,SAAC5D,EAAGE,GAAJ,OAAQ,EAAKV,SAAS,CAAChD,OAAO0D,EAAEE,eACrDyD,iBAAkB,CACdzE,QAAQ,UAAU5C,EAClB+C,QAAS,SAAAuE,GACL,EAAKtE,SAAS,CAACxC,OAAM,EAAMD,KAAK,CAAC,EAAKe,eAAetB,IAAtB,mBAAkCO,IAAOE,QAAO,KAGnF/B,MAAM,CAACmE,OAAQ,WACf0E,QAAQ,KAKhB,6BAECnD,EAAKlF,eAAeT,MAjCzB,IAiCgC,6BAC3B2F,EAAKlF,eAAeP,YACrB,kBAAC,IAAD,CACI6I,IAAK,SAAAC,GAAC,OAAE,EAAKC,KAAKD,GAClBd,MAAOvG,EAAU0B,KAAKN,aAAc,GACpCiC,MAAOpD,EAASA,EAAQuC,QAAU,KAClC5D,YAAaoF,EAAKlF,eAAeF,YACjCgI,QAAQ,EACRW,QAASrH,EACTsH,eAAe,aACfR,oBAAqBtF,KAAKL,YAC1BoG,SAAU/F,KAAKH,cACfkF,KAAK,UACLiB,UAAU1H,EACV8G,aAAc,SAAAC,GAAC,OAAEA,EAAEA,EAAEvE,QAAQ,IAC7BmE,OAAO,IAGX,6BAEC3C,EAAKjF,YAAYV,MArDtB,IAqD6B,6BACxB2F,EAAKjF,YAAYR,YAtDtB,IAsDmC,6BAG/B,kBAAC,IAAD,CAAUR,MAAOiG,EAAK1E,MAAM,GAAIqI,QAAS/G,EAAa6G,SAAU,kBAAI,EAAK7E,SAAS,CAAChC,aAAcA,OACjG,kBAAC,IAAD,CAAU7C,MAAOiG,EAAK1E,MAAM,GAAIqI,QAAS9G,EAAW4G,SAAU,kBAAI,EAAK7E,SAAS,CAAC/B,WAAYA,OAC7F,kBAAC,IAAD,CAAU9C,MAAOiG,EAAK1E,MAAM,GAAIqI,QAAShH,EAAU8G,SAAU,kBAAI,EAAK7E,SAAS,CAACjC,UAAWA,OAE3F,kBAAC,IAAD,CACIiH,aAAc5D,EAAKhF,aAAaC,OAChC4I,SAAU,kBAAI,EAAKjF,SAAS,CAACC,UAAU,QACvCiF,cAAe9D,EAAKhF,aAAaE,QACjC6I,UAAWrG,KAAKT,gBAChBuB,QAASwB,EAAKhF,aAAaI,QAAQyD,GACnC1D,OAAQ6E,EAAKhF,aAAaG,OAC1B0H,MAAOhK,EAAagG,GACpBmF,UAAU,UAWtC,M,GAhaKC,IAAMC,WAwaZ1I","file":"component---src-pages-connector-js-8931cd1979910dc655fc.js","sourcesContent":["import React from 'react';\nimport { Provider, teamsTheme, Flex, FlexItem, Dropdown, RadioGroup, Header, Label, Checkbox, Dialog} from '@fluentui/react-northstar';\nimport { BanIcon, AcceptIcon } from '@fluentui/react-icons-northstar';\n\nconst isNilOrEmpty = str => str==null || str.length == 0\n\nconst styles={\n    mainPadding:{padding:\"0px 2em\"},\n    mainSidePadding:{padding:\"10px 2em\"},\n    mainPdf:{display:\"flex\", justifyContent:\"center\"},\n    mainTable:{\n        backgroundColor: \"#fff\",\n        border: \"1px solid #d8e2f0\",\n        borderRadius: \"4px\",\n        boxShadow: \"0 0 10px 0 rgba(19,29,41,.05)\",\n        position: \"relative\",\n        padding: \"0em 3em 2em\"\n    },\n    backButton:{\n        cusor:\"pointer\"\n    },\n    label:{\n        fontWeight:\"bold\"\n    }\n}\n\nconst langs={\n    en:{\n        heading:\"Moneybird Configuration\",\n        apiSection:{\n            title: <label style={styles.label} >API Token</label>,\n            description:  <span>This is the API Token for you MoneyBird Account. You can generate one <a target=\"_blank\" href=\"https://moneybird.com/user/applications/new\">here</a> for personal use.</span>,\n            succsess: \"API Token is vaild\",\n            fail: \"API Token NOT vaild\",\n            placeholder: 'API Token',\n            show:\"Click to choose another api key\"\n        },\n        contactSection:{\n            title:<label style={styles.label} >Contact</label>,\n            description: <span>The contact whos data will show up on the tab</span>,\n            placeholder: 'Choose a Contact'\n        },\n        typeSection:{\n            title:<label style={styles.label} >Data Type</label>,\n            description: <span>The types of data to show notifcations for</span>,\n           \n        },\n        deleteDialog:{\n            cancel: \"Cancel\",\n            confirm: \"Yes\",\n            header:\"Delete API Key\",\n            message: x=>`Are you sure you want to delete ${x}`,\n\n        },\n        types:[\"Invoices\", \"Quotes\", \"Hours\"]\n    },\n    nl:{\n        heading:\"Moneybird Koppelen\",\n        apiSection:{\n            title:<label style={styles.label} >API token invoeren</label>,\n            description:  <span>Vul hier een API-token in van je Moneybird account. Je kunt <a target=\"_blank\" href=\"https://moneybird.com/user/applications/new\">hier</a> een API-token genereren. Vul een naam in die herkenbaar is voor deze connectie, bijvoorbeeld ‘Microsoft Teams Integratie’. Kies voor ‘API token voor persoonlijk gebruik’ en geef toegang voor alle onderdelen. Vervolgens verschijnt er een API-token in beeld. Vul deze hieronder in.</span>,\n            succsess: \"API-token is geldig\",\n            fail: \"API-token niet geldig\",\n            placeholder: 'API token invoeren',\n            show:\"Klik om een ​​andere API-sleutel te kiezen\"\n        },\n        contactSection:{\n            title:<label style={styles.label} >Contact</label>,\n            description:  <span>Selecteer de Contact waarvan je de gegevens wilt tonen in de Tab.</span>,\n            placeholder:\"Kies een Contact\"\n        },\n        typeSection:{\n            title:<label style={styles.label} >Data Type</label>,\n            description: <span>Het type gegevens dat op het tabblad moet worden weergegeven</span>,\n           \n        },\n        deleteDialog:{\n            cancel: \"Annuleren\",\n            confirm: \"Ja\",\n            header:\"API-sleutel verwijderen\",\n            message: x=>`Weet je zeker dat je wilt verwijderen ${x}`,\n\n        },\n        types:[\"Facturen\", \"Offertes\", \"Uren\"]\n    }\n}\n\nclass Config extends React.Component{\n    constructor(){\n        super();\n        if(this.microsoftTeams)\n            this.microsoftTeams.initialize();\n        this.state ={\n            apiKey:\"\",\n            adminId:null,\n            admins:null,\n            admin:null,\n            contacts:null,\n            contact:null,\n            loadingContacts:false,\n            keys:[],\n            isNew:false,\n            isOpen: false,\n            isContactsOpen: false,\n            locale:null,\n            tabType:\"invoices\",\n            showApiKeys: false,\n            loaded: false,\n\n            forHours:false,\n            forInvoices:false,\n            forQuotes:false\n        }\n        \n        this.addWebhookToMoneybird = this.addWebhookToMoneybird.bind(this)\n        this.setUpWebhook = this.setUpWebhook.bind(this)\n        this.deleteKeyFromDb=this.deleteKeyFromDb.bind(this)\n        this.createKeyEntry=this.createKeyEntry.bind(this)\n        this.getAdmin =this.getAdmin.bind(this)\n        this.getOptions = this.getOptions.bind(this)\n        this.getContacts = this.getContacts.bind(this)\n        this.getAdminAndContacts = this.getAdminAndContacts.bind(this)\n        this.updateContact = this.updateContact.bind(this)\n    }\n\n    async componentDidMount(){\n        /*const  tid = \"3e2156e8-2679-455b-b3f0-458173a8190b\";\n        const locale = \"en-us\";    \n\n        try{\n            const res = await fetch(\n                `https://moneybirdhandlerproxy.azurewebsites.net/api/key/${tid}`,\n                {\n                    mode:\"cors\",\n                    method:\"GET\"\n                }\n            )\n            const json = await res.json()\n            console.log({json})\n            const keys = json.map(k=>({\n                content: <div>\n                    <span \n                        style={{cursor:\"pointer\"}} \n                        class=\"lnr lnr-trash\" \n                        onClick={()=>this.setState({deleteKey:k.key, isOpen:false})}></span> - <span style={{cursor:\"pointer\"}} onClick={async ()=>{await this.getAdminAndContacts(k.key)}}>{k.key}</span>\n                </div>,\n                key: k.key\n            }));\n            console.log({keys})\n            this.setState({keys, tid, locale})\n\n        }\n        catch(e){\n            console.log(\"BOO\")\n            console.log(e)\n        }*/\n      this.microsoftTeams = window? window.microsoftTeams: null;\n        this.microsoftTeams.initialize();\n        this.microsoftTeams.getContext((async context=>{\n            const {tid, locale} = context;\n            \n            try{\n                const res = await fetch(\n                    `https://moneybirdproxymaatwerk.azurewebsites.net/api/key/${tid}`,\n                    {\n                        mode:\"cors\",\n                        method:\"GET\"\n                    }\n                )\n                const json = await res.json()\n                console.log({json})\n                const keys = json.map(k=>({\n                    content: <div>\n                        <span \n                            style={{cursor:\"pointer\"}} \n                            class=\"lnr lnr-trash\" \n                            onClick={()=>this.setState({deleteKey:k.key, isOpen:false})}></span> - <span style={{cursor:\"pointer\"}} onClick={async ()=>{await this.getAdminAndContacts(k.key)}}>{k.key}</span>\n                    </div>,\n                    key: k.key\n                }));\n                console.log({keys})\n                this.setState({keys, tid, locale})\n    \n            }\n            catch(e){\n                console.log(\"BOO\")\n                console.log(e)\n            }\n    }).bind(this))\n    }\n\n    getForDataTypes(){\n        const {forInvoices, forQuotes, forHours} = this.state\n        let urlParam = []\n        let events = []\n\n        if(forInvoices){\n            urlParam.push(\"i\")\n            events.push(\"sales_invoice_created\")\n        }\n        if(forQuotes){\n            urlParam.push(\"q\")\n            events.push(\"estimate_created\")\n        }\n        if(forHours){\n            urlParam.push(\"h\")\n            events.push(\"time_entry_created\")\n            events.push(\"time_entry_updated\")\n        }\n\n        return{\n            urlParam: urlParam.join(\"-\"),\n            events\n        }\n    }\n\n    async getAdminAndContacts(apiKey){\n        const adminId =  await this.getAdmin(apiKey);\n        await this.getContacts()\n    }\n\n    updateContact(e, {value}){\n        const {apiKey} = this.state;\n        this.setState({contact:value}, ()=>this.setUpWebhook(apiKey))\n    }\n\n    async getContacts(v, e){\n        \n        const {apiKey, adminId} = this.state;\n        if(e){\n            const q = e.searchQuery;\n            try{\n                this.setState({loadingContacts:true})\n                const res = await fetch(\n                    `https://moneybirdproxymaatwerk.azurewebsites.net/api/MoneyBirdProxy`,\n                    {\n                        mode:\"cors\",\n                        method:\"POST\",\n                        body: JSON.stringify({\n                            method:\"GET\",\n                            path:`${adminId}/contacts.json${isNilOrEmpty(q)?'':\"?query=\"+q}`,\n                            key: apiKey,\n                        })\n                    }\n                )\n                const json = await res.json()\n                console.log({json})\n                this.setState({contacts:json, loadingContacts:false})\n    \n            }\n            catch(e){\n                console.log(\"BOOM!\")\n                console.log(e)\n            }\n        }\n        else if(v){\n            this.setState({ contact: v.value }, this.save)\n        }\n        else{\n            const res = await fetch(\n                `https://moneybirdproxymaatwerk.azurewebsites.net/api/MoneyBirdProxy`,\n                {\n                    mode:\"cors\",\n                    method:\"POST\",\n                    body: JSON.stringify({\n                        method:\"GET\",\n                        path:`${adminId}/contacts.json`,\n                        key: apiKey,\n                    })\n                }\n            )\n            const json = await res.json()\n            console.log({json})\n            this.setState({contacts:json,  isOpen:false})\n        }\n       \n    }\n    \n    async addWebhookToMoneybird(apiKey, adminId, webhook, events){\n        const {locale, contact} = this.state\n        const contactId = contact.value\n        console.log(\"AHHHHHHH!!!\")\n        console.log({events})\n        console.log({locale})\n        console.log({contactId})\n        console.log(`https://moneybirdproxymaatwerk.azurewebsites.net/api/teams/${lang}/${events.urlParam}/${contactId}/${webhook}`);\n        const lang = locale? locale.split(\"-\")[0]: \"en\"\n        const res = await fetch(\n            `https://moneybirdproxymaatwerk.azurewebsites.net/api/MoneyBirdProxy`,\n            {\n                mode:\"cors\",\n                method:\"POST\",\n                body: JSON.stringify({\n                    method:\"POST\",\n                    path:`${adminId}/webhooks.json`,\n                    key: apiKey,\n                    data:{\n                        url:`https://moneybirdproxymaatwerk.azurewebsites.net/api/teams/${lang}/${events.urlParam}/${contactId}/${webhook}`,\n                        events: events.events\n                    }\n                })\n            }\n        )\n        console.log(\"AHHHHHHH!!!\")\n        return await res.json()\n    }\n\n    async getAdmin(apiKey, isNew=false){\n        \n        try{\n            const res = await fetch(\n                `https://moneybirdproxymaatwerk.azurewebsites.net/api/MoneyBirdProxy`,\n                {\n                    mode:\"cors\",\n                    method:\"POST\",\n                    body: JSON.stringify({\n                        method:\"GET\",\n                        path:`administrations.json`,\n                        key: apiKey,\n                    })\n                }\n            )\n            const json = await res.json()\n            \n            if(json.error)\n                this.setState({admins:false,  isOpen:false, contacts:null})\n            else{\n                this.setState({admin:json[0], adminId:json[0].id, admins:true})\n                return json[0].id\n            }\n        }\n        catch(e){\n            console.log(e)\n        }\n    }\n\n    async setUpWebhook(v){\n        this.setState({apiKey:v, isOpen:false})\n        console.log(\"SETUPWEBHOOK\")\n        \n        this.microsoftTeams.settings.setValidityState(true);\n        console.log(\"saved\")\n        this.microsoftTeams.settings.registerOnSaveHandler((saveEvent=>{\n            console.log(\"REGISTERSAVEHANDLER\")\n            this.microsoftTeams.getContext((context=>{\n                console.log(\"GETCONTEXT\")\n                const {teamId, channelId} = context;\n                const forTypes = this.getForDataTypes();\n                if(isNilOrEmpty(forTypes.urlParam)){\n                    saveEvent.notifyFailure(\"Must select a event type to recive notifcations\")\n                    return\n                }\n                const contentUrl = `https://jp5525.github.io/teams-demo/connector`;\n                const entityId = `connector-moneybird-${teamId}-${channelId}`;\n\n                this.microsoftTeams.settings.setSettings({\n                    contentUrl,\n                    entityId,\n                    configName:\"Moneybird\"\n                });\n\n                this.microsoftTeams.settings.getSettings(async settings=>{\n                    const { webhookUrl } = settings;\n                    const res = /webhook\\/(.*)/.exec(webhookUrl);\n                    const encoded = encodeURIComponent(res[1]);\n                    console.log({webhookUrl});\n\n                    const adminId = await this.getAdmin(v);\n                    //double encode the webhook\n                    const webhook = await this.addWebhookToMoneybird(v, adminId, encodeURIComponent(encoded), forTypes)\n                    console.log({webhook})\n                    \n                    saveEvent.notifySuccess()\n                })\n\n            }).bind(this))\n        }).bind(this))\n    }\n\n    async deleteKeyFromDb(){\n        const {deleteKey, keys} = this.state;\n        if(!isNilOrEmpty(deleteKey)){\n            await fetch(\n                `https://moneybirdproxymaatwerk.azurewebsites.net/api/key/${deleteKey}`,\n                {\n                    mode:\"cors\",\n                    method:\"DELETE\",\n                }\n            );\n            this.setState({deleteKey:null, apiKey:\"\", keys:keys.filter(x=>x.key != deleteKey)})\n        }\n    }\n\n    createKeyEntry(k){\n        return {\n            content:<div>\n                <span style={{cursor:\"pointer\"}} class=\"lnr lnr-trash\" onClick={()=>this.setState({deleteKey:k})}></span> - <span style={{cursor:\"pointer\"}} onClick={()=>this.handleToken(k)}>{k}</span>\n            </div>,\n            key:k\n        }\n    }\n\n    getOptions(){\n        const {contacts} = this.state;\n        return contacts.map(c=>({\n            content:c.company_name, \n            value:c.id,\n        }))\n    }\n\n    render(){\n        const {contacts, contact, admins, admin, apiKey, keys, isOpen, locale, loadingContacts, showApiKeys, deleteKey, forHours, forInvoices, forQuotes } = this.state;\n        console.log({locale})\n        const lang = locale? langs[locale.split(\"-\")[0]]: null\n        \n        return (\n            lang?\n                <Provider theme={teamsTheme}>\n                    <div style={styles.mainPadding}>\n                        <div style={styles.mainTable}>\n                            <Header content={lang.heading}/>\n                            <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"start\">\n                                <FlexItem justifyContent=\"center\">\n                                    <form  style={{width:\"100%\"}}>\n                                        \n                                        {lang.apiSection.title} <br/>\n                                        {lang.apiSection.description}\n                                        {admins== false? <> <br/><Label content={lang.apiSection.fail} style={{background:\"#cc4a31\", color:\"white\", marginTop: \"10px\", marginBottom:\"10px\"}}/></> : null}\n                                        {admins? <> <br/><Label content={lang.apiSection.succsess} style={{background:\"#7fba00\", color:\"white\", marginTop: \"10px\", marginBottom:\"10px\"}} /></> : null}\n                                        {<Dropdown\n                                            items={keys}\n                                            placeholder={lang.apiSection.placeholder}\n                                            onOpenChange={()=>this.setState({isOpen:!isOpen})}\n                                            name=\"apiKey\"\n                                            id=\"apiKey\"\n                                            clearable={apiKey && apiKey.length>0}\n                                            fluid={true}\n                                            search={true}\n                                            open={isOpen}\n                                            searchQuery={apiKey}\n                                            itemToString={i=> i? i.key : \"\"}\n                                            onSearchQueryChange={(e, v)=>this.setState({apiKey:v.searchQuery})}\n                                            noResultsMessage={{\n                                                content:`Add... ${apiKey}`, \n                                                onClick: m=>{\n                                                    this.setState({isNew:true, keys:[this.createKeyEntry(apiKey), ...keys], isOpen:false})\n                                                    \n                                                }, \n                                                style:{cursor: \"pointer\"},\n                                                active: true\n                                            }}\n                                        />\n                                        }\n\n                                        <br />\n\n                                        {lang.contactSection.title} <br/>\n                                        {lang.contactSection.description}\n                                        <Dropdown\n                                            ref={r=>this.drop=r}\n                                            items={contacts? this.getOptions(): []}\n                                            value={contact? contact.content : null}\n                                            placeholder={lang.contactSection.placeholder}\n                                            search={true}\n                                            loading={loadingContacts}\n                                            loadingMessage=\"Loading...\"\n                                            onSearchQueryChange={this.getContacts}\n                                            onChange={this.updateContact}\n                                            name=\"contact\"\n                                            disabled={contacts? false: true}\n                                            itemToString={i=>i?i.content:''}\n                                            fluid={true}\n                                            />\n\n                                        <br />\n\n                                        {lang.typeSection.title} <br/>\n                                        {lang.typeSection.description} <br/>\n                                        \n\n                                        <Checkbox label={lang.types[0]} checked={forInvoices} onChange={()=>this.setState({forInvoices: !forInvoices})}/>\n                                        <Checkbox label={lang.types[1]} checked={forQuotes} onChange={()=>this.setState({forQuotes: !forQuotes})}/>\n                                        <Checkbox label={lang.types[2]} checked={forHours} onChange={()=>this.setState({forHours: !forHours})}/>\n\n                                        <Dialog\n                                            cancelButton={lang.deleteDialog.cancel}\n                                            onCancel={()=>this.setState({deleteKey:null})}\n                                            confirmButton={lang.deleteDialog.confirm}\n                                            onConfirm={this.deleteKeyFromDb}\n                                            content={lang.deleteDialog.message(deleteKey)}\n                                            header={lang.deleteDialog.header}\n                                            open={!isNilOrEmpty(deleteKey)}\n                                            backdrop={true} \n                                        />\n                                        \n                                      \n                                    </form>\n                                </FlexItem>\n                            </Flex>\n                        </div>\n                    </div>\n                \n                </Provider>:\n                null\n            \n            \n        )\n\n    }\n}\n\nexport default Config;\n"],"sourceRoot":""}